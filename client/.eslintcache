[{"C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\index.js":"1","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\App.js":"2","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\reportWebVitals.js":"3","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\config\\graphql.js":"4","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\components\\Navigation.jsx":"5","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Series.jsx":"6","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Movies.jsx":"7","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\SeriesDetail.jsx":"8","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\MoviesDetail.jsx":"9","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Home.jsx":"10","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Favorites.jsx":"11","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\components\\Card.jsx":"12","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\cache\\index.js":"13","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\components\\CustomLoader.jsx":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":1331,"mtime":1611080683909,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":432,"mtime":1611121200157,"results":"19","hashOfConfig":"16"},{"size":716,"mtime":1611124011405,"results":"20","hashOfConfig":"16"},{"size":5909,"mtime":1611129860846,"results":"21","hashOfConfig":"16"},{"size":5891,"mtime":1611129899024,"results":"22","hashOfConfig":"16"},{"size":7867,"mtime":1611129984586,"results":"23","hashOfConfig":"16"},{"size":7759,"mtime":1611129946741,"results":"24","hashOfConfig":"16"},{"size":1798,"mtime":1611129769991,"results":"25","hashOfConfig":"16"},{"size":1648,"mtime":1611129803531,"results":"26","hashOfConfig":"16"},{"size":1369,"mtime":1611123250136,"results":"27","hashOfConfig":"16"},{"size":83,"mtime":1611121212014,"results":"28","hashOfConfig":"16"},{"size":266,"mtime":1611129756586,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"n07y25",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\index.js",[],["68","69"],"C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\App.js",["70"],"import logo from './logo.svg';\nimport './App.css';\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nimport { ApolloProvider } from '@apollo/client'\nimport client from './config/graphql'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Navigation from './components/Navigation';\n\nimport Home from './pages/Home'\nimport Series from './pages/Series'\nimport Movies from './pages/Movies'\nimport SeriesDetail from './pages/SeriesDetail'\nimport MoviesDetail from './pages/MoviesDetail'\nimport Favorites from './pages/Favorites'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Router>\n          <Navigation />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/movies\">\n              <Movies />\n            </Route>\n            <Route path=\"/movies/:id\">\n              <MoviesDetail />\n            </Route>\n            <Route exact path=\"/series\">\n              <Series />\n            </Route>\n            <Route path=\"/series/:id\">\n              <SeriesDetail />\n            </Route>\n            <Route path=\"/favorites\">\n              <Favorites />\n            </Route>\n          </Switch>\n        </Router>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\reportWebVitals.js",[],"C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\config\\graphql.js",[],"C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\components\\Navigation.jsx",["71"],"import React from 'react';\r\nimport { Navbar, Nav, Dropdown, Icon } from 'rsuite'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Navigation () {\r\n  return (\r\n    <Navbar appearance=\"inverse\">\r\n      <Navbar.Header>\r\n        <p className=\"navbar-brand logo\">EntertainMe</p>\r\n      </Navbar.Header>\r\n      <Navbar.Body>\r\n        <Nav>\r\n          <Link to=\"/\"><Nav.Item icon={<Icon icon=\"home\" />}>Home</Nav.Item></Link>\r\n          <Link to=\"/movies\"><Nav.Item>Movies</Nav.Item></Link>\r\n          <Link to=\"/series\"><Nav.Item>TV Series</Nav.Item></Link>\r\n          <Link to=\"/favorites\"><Nav.Item>Favorites</Nav.Item></Link>\r\n        </Nav>\r\n      </Navbar.Body>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Navigation","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Series.jsx",["72","73","74"],"import React, { useState } from 'react';\r\nimport { Container, FlexboxGrid, Divider, Icon, Pagination, Button, ButtonToolbar, Modal } from 'rsuite';\r\nimport { gql, useQuery, useMutation } from \"@apollo/client\"\r\nimport { Form, FormGroup, FormControl, ControlLabel, InputNumber, HelpBlock } from 'rsuite'\r\nimport { Schema, Alert } from 'rsuite';\r\nimport CustomLoader from '../components/CustomLoader';\r\n\r\nimport Card from '../components/Card'\r\n\r\nconst GET_SERIES = gql`\r\n  query {\r\n    series {\r\n      _id\r\n      title\r\n      poster_path\r\n    }\r\n  }\r\n`\r\n\r\nconst CREATE_SERIES = gql`\r\n  mutation createSeries($inputSeries: SeriesInput) {\r\n    createSeries(series: $inputSeries) {\r\n      title\r\n    }\r\n  }\r\n`\r\n\r\nclass CustomField extends React.PureComponent {\r\n  render() {\r\n    const { name, message, label, accepter, error, ...props } = this.props;\r\n    return (\r\n      <FormGroup className={error ? 'has-error' : ''}>\r\n        <ControlLabel>{label} </ControlLabel>\r\n        <FormControl\r\n          name={name}\r\n          accepter={accepter}\r\n          errorMessage={error}\r\n          {...props}\r\n        />\r\n        <HelpBlock>{message}</HelpBlock>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Series () {\r\n  const [createSeries] = useMutation(CREATE_SERIES)\r\n  const [inputTitle, setInputTitle] = useState('')\r\n  const [inputOverview, setInputOverview] = useState('')\r\n  const [inputPoster, setInputPoster] = useState('')\r\n  const [inputPopularity, setInputPopularity] = useState(0)\r\n  const [inputTags, setInputTags] = useState([])\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  function addSeries (e) {\r\n    const inputSeries = {\r\n      title: inputTitle,\r\n      overview: inputOverview,\r\n      poster_path: inputPoster,\r\n      popularity: parseFloat(inputPopularity),\r\n      tags: inputTags.split(\",\").map((el) => el.trim())\r\n    }\r\n    \r\n    console.log(inputSeries)\r\n\r\n    createSeries({\r\n      variables: {\r\n        inputSeries: {\r\n          title: inputSeries.title,\r\n          overview: inputSeries.overview,\r\n          poster_path: inputSeries.poster_path,\r\n          popularity: inputSeries.popularity,\r\n          tags: inputSeries.tags\r\n        }\r\n      }\r\n    })\r\n\r\n    Alert.success(\"Series added sucessfully\")\r\n\r\n    setInputTitle('')\r\n    setInputOverview('')\r\n    setInputPoster('')\r\n    setInputPopularity(0)\r\n    setInputTags([])\r\n    setShow(false)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setInputTitle('')\r\n    setInputOverview('')\r\n    setInputPoster('')\r\n    setInputPopularity(0)\r\n    setInputTags([])\r\n    setShow(false)\r\n  }\r\n  const handleShow = () => setShow(true)\r\n  \r\n  const handleTitle = (e) => {\r\n    setInputTitle(e);\r\n  };\r\n  const handleOverview = (e) => {\r\n    setInputOverview(e);\r\n  };\r\n  const handlePoster = (e) => {\r\n    setInputPoster(e);\r\n  };\r\n  const handlePopularity = (e) => {\r\n    setInputPopularity(e);\r\n  };\r\n  const handleTags = (e) => {\r\n    setInputTags(e);\r\n  };\r\n\r\n  const { StringType, NumberType } = Schema.Types;\r\n  const model = Schema.Model({\r\n    title: StringType().isRequired('Title is required'),\r\n    overview: StringType().isRequired('Overview is required'),\r\n    poster_path: StringType().isRequired('Poster is required in URL format'),\r\n    popularity: NumberType(),\r\n    tags: StringType()\r\n  })\r\n\r\n  const { loading, error, data, refetch } = useQuery(GET_SERIES)\r\n\r\n  if (loading) return (<CustomLoader />)\r\n  if (error) return <div>{JSON.stringify(error)}</div>\r\n  return (\r\n    <Container style={{ margin:'2rem' }}>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header>\r\n          <Modal.Title>Add Movies</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form \r\n            fluid \r\n            onSubmit={addSeries} \r\n            model={model}\r\n            formValue = {{\r\n              title: inputTitle,\r\n              overview: inputOverview,\r\n              poster_path: inputPoster,\r\n              popularity: inputPopularity,\r\n              tags: inputTags\r\n            }}\r\n          >\r\n            <FormGroup>\r\n              <ControlLabel>Title</ControlLabel>\r\n              <FormControl name=\"title\" type=\"text\" onChange={handleTitle}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Overview</ControlLabel>\r\n              <FormControl name=\"overview\" type=\"textarea\" rows={5} componentClass=\"textarea\" onChange={handleOverview}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Poster Path</ControlLabel>\r\n              <FormControl name=\"poster_path\" type=\"text\" onChange={handlePoster}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Popularity</ControlLabel>\r\n              <CustomField\r\n                name=\"popularity\"\r\n                accepter={InputNumber}\r\n                step={0.1}\r\n                min={0}\r\n                max={10}\r\n                onChange={handlePopularity}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Tags</ControlLabel>\r\n              <FormControl name=\"tags\" type=\"text\" onChange={handleTags}/>\r\n            </FormGroup>\r\n            <Button type=\"submit\" appearance=\"primary\">\r\n              Submit\r\n            </Button>\r\n            <Button onClick={handleClose} appearance=\"subtle\">\r\n              Cancel\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <h1 style={{ alignSelf: \"center\"}}>EntertainMe Series</h1>\r\n      <ButtonToolbar style={{ alignSelf: \"center\", marginTop:'1rem'}}>\r\n        <Button appearance=\"primary\" onClick={handleShow}>Add Series</Button>\r\n      </ButtonToolbar>\r\n      <Divider />\r\n      <FlexboxGrid justify=\"space-around\">\r\n        {data.series.map((serie) => {\r\n          return <Card key={serie._id} content={serie} from={\"series\"} />;\r\n        })}\r\n      </FlexboxGrid>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Series","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Movies.jsx",["75","76","77"],"import React, { useState } from 'react';\r\nimport { Container, FlexboxGrid, Divider, Icon, Pagination, Button, ButtonToolbar, Modal } from 'rsuite';\r\nimport { gql, useQuery, useMutation } from \"@apollo/client\"\r\nimport { Form, FormGroup, FormControl, ControlLabel, InputNumber, HelpBlock } from 'rsuite'\r\nimport { Schema, Alert } from 'rsuite';\r\nimport CustomLoader from '../components/CustomLoader';\r\n\r\nimport Card from '../components/Card'\r\n\r\nconst GET_MOVIES = gql`\r\n  query {\r\n    movies {\r\n      _id\r\n      title\r\n      poster_path\r\n    }\r\n  }\r\n`\r\n\r\nconst CREATE_MOVIE = gql`\r\n  mutation createMovie($inputMovie: MovieInput) {\r\n    createMovie(movies: $inputMovie) {\r\n      title\r\n    }\r\n  }\r\n`\r\n\r\nclass CustomField extends React.PureComponent {\r\n  render() {\r\n    const { name, message, label, accepter, error, ...props } = this.props;\r\n    return (\r\n      <FormGroup className={error ? 'has-error' : ''}>\r\n        <ControlLabel>{label} </ControlLabel>\r\n        <FormControl\r\n          name={name}\r\n          accepter={accepter}\r\n          errorMessage={error}\r\n          {...props}\r\n        />\r\n        <HelpBlock>{message}</HelpBlock>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Movies () {\r\n  const [createMovie] = useMutation(CREATE_MOVIE)\r\n  const [inputTitle, setInputTitle] = useState('')\r\n  const [inputOverview, setInputOverview] = useState('')\r\n  const [inputPoster, setInputPoster] = useState('')\r\n  const [inputPopularity, setInputPopularity] = useState(0)\r\n  const [inputTags, setInputTags] = useState([])\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  function addMovie (e) {\r\n    const inputMovie = {\r\n      title: inputTitle,\r\n      overview: inputOverview,\r\n      poster_path: inputPoster,\r\n      popularity: parseFloat(inputPopularity),\r\n      tags: inputTags.split(\",\").map((el) => el.trim())\r\n    }\r\n    \r\n    console.log(inputMovie)\r\n\r\n    createMovie({\r\n      variables: {\r\n        inputMovie: {\r\n          title: inputMovie.title,\r\n          overview: inputMovie.overview,\r\n          poster_path: inputMovie.poster_path,\r\n          popularity: inputMovie.popularity,\r\n          tags: inputMovie.tags\r\n        }\r\n      }\r\n    })\r\n\r\n    Alert.success(\"Movies added sucessfully\")\r\n\r\n    setInputTitle('')\r\n    setInputOverview('')\r\n    setInputPoster('')\r\n    setInputPopularity(0)\r\n    setInputTags([])\r\n    setShow(false)\r\n  }\r\n\r\n\r\n  const handleClose = () => {\r\n    setInputTitle('')\r\n    setInputOverview('')\r\n    setInputPoster('')\r\n    setInputPopularity(0)\r\n    setInputTags([])\r\n    setShow(false)\r\n  }\r\n  const handleShow = () => setShow(true)\r\n  \r\n  const handleTitle = (e) => {\r\n    setInputTitle(e);\r\n  };\r\n  const handleOverview = (e) => {\r\n    setInputOverview(e);\r\n  };\r\n  const handlePoster = (e) => {\r\n    setInputPoster(e);\r\n  };\r\n  const handlePopularity = (e) => {\r\n    setInputPopularity(e);\r\n  };\r\n  const handleTags = (e) => {\r\n    setInputTags(e);\r\n  };\r\n\r\n  const { StringType, NumberType } = Schema.Types;\r\n  const model = Schema.Model({\r\n    title: StringType().isRequired('Title is required'),\r\n    overview: StringType().isRequired('Overview is required'),\r\n    poster_path: StringType().isRequired('Poster is required in URL format'),\r\n    popularity: NumberType(),\r\n    tags: StringType()\r\n  })\r\n\r\n  const { loading, error, data, refetch } = useQuery(GET_MOVIES)\r\n\r\n  if (loading) return (<CustomLoader />)\r\n  if (error) return <div>{JSON.stringify(error)}</div>\r\n  return (\r\n    <Container style={{ margin:'2rem' }}>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header>\r\n          <Modal.Title>Add Movies</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form \r\n            fluid \r\n            onSubmit={addMovie} \r\n            model={model}\r\n            formValue = {{\r\n              title: inputTitle,\r\n              overview: inputOverview,\r\n              poster_path: inputPoster,\r\n              popularity: inputPopularity,\r\n              tags: inputTags\r\n            }}\r\n          >\r\n            <FormGroup>\r\n              <ControlLabel>Title</ControlLabel>\r\n              <FormControl name=\"title\" type=\"text\" onChange={handleTitle}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Overview</ControlLabel>\r\n              <FormControl name=\"overview\" type=\"textarea\" rows={5} componentClass=\"textarea\" onChange={handleOverview}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Poster Path</ControlLabel>\r\n              <FormControl name=\"poster_path\" type=\"text\" onChange={handlePoster}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Popularity</ControlLabel>\r\n              <CustomField\r\n                name=\"popularity\"\r\n                accepter={InputNumber}\r\n                step={0.1}\r\n                min={0}\r\n                max={10}\r\n                onChange={handlePopularity}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Tags</ControlLabel>\r\n              <FormControl name=\"tags\" type=\"text\" onChange={handleTags}/>\r\n            </FormGroup>\r\n            <Button type=\"submit\" appearance=\"primary\">\r\n              Submit\r\n            </Button>\r\n            <Button onClick={handleClose} appearance=\"subtle\">\r\n              Cancel\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <h1 style={{ alignSelf: \"center\"}}>EntertainMe Movies</h1>\r\n      <ButtonToolbar style={{ alignSelf: \"center\", marginTop:'1rem'}}>\r\n        <Button appearance=\"primary\" onClick={handleShow}>Add Movie</Button>\r\n      </ButtonToolbar>\r\n      <Divider />\r\n      <FlexboxGrid justify=\"space-around\">\r\n        {data.movies.map((movie) => {\r\n          return <Card key={movie._id} content={movie} from={\"movies\"} />;\r\n        })}\r\n      </FlexboxGrid>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Movies","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\SeriesDetail.jsx",["78","79","80"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { gql, useQuery, useMutation } from '@apollo/client';\r\nimport { FlexboxGrid, Button, ButtonToolbar, ButtonGroup, Container, Panel, Divider, Modal } from 'rsuite';\r\nimport { Form, FormGroup, FormControl, ControlLabel, InputNumber, HelpBlock } from 'rsuite'\r\nimport { Schema, Alert, Icon, Rate } from 'rsuite';\r\nimport CustomLoader from '../components/CustomLoader'\r\n\r\nconst GET_DETAIL_SERIES = gql`\r\n  query seriesById($id: String!) {\r\n    seriesById(id: $id) {\r\n      title,\r\n      overview,\r\n      poster_path,\r\n      tags,\r\n      popularity\r\n    }\r\n  }\r\n`\r\n\r\nconst UPDATE_SERIES = gql`\r\n  mutation updateSeries($id: String!, $updates: SeriesInput) {\r\n    updateSeries(id: $id, updates: $updates) {\r\n      title,\r\n      overview,\r\n      poster_path,\r\n      tags,\r\n      popularity\r\n    }\r\n  }\r\n`\r\n\r\nconst DELETE_SERIES = gql`\r\n  mutation deleteSeries ($id: String!) {\r\n    deleteSeries(id: $id) {\r\n      _id\r\n    }\r\n  }\r\n`\r\n\r\nclass CustomField extends React.PureComponent {\r\n  render() {\r\n    const { name, message, label, accepter, error, ...props } = this.props;\r\n    return (\r\n      <FormGroup className={error ? 'has-error' : ''}>\r\n        <ControlLabel>{label} </ControlLabel>\r\n        <FormControl\r\n          name={name}\r\n          accepter={accepter}\r\n          errorMessage={error}\r\n          {...props}\r\n        />\r\n        <HelpBlock>{message}</HelpBlock>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nfunction SeriesDetail () {\r\n  const { id } = useParams()\r\n  const history = useHistory()\r\n  const [inputSeries, setInputSeries] = useState({\r\n    title: \"\",\r\n    overview: \"\",\r\n    poster_path: \"\",\r\n    popularity: 0,\r\n    tags: []\r\n  })\r\n\r\n  const [updateSeries] = useMutation(UPDATE_SERIES)\r\n  const [deleteSeries] = useMutation(DELETE_SERIES)\r\n\r\n  const [show, setShow] = useState(false)\r\n  const [showDelete, setShowDelete] = useState(false)\r\n\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => {\r\n    setInputSeries(data.seriesById)\r\n    setShow(true)\r\n  }\r\n\r\n  const handleTitle = (e) => {\r\n    setInputSeries({...inputSeries, title: e});\r\n  };\r\n  const handleOverview = (e) => {\r\n    setInputSeries({...inputSeries, overview: e});\r\n  };\r\n  const handlePoster = (e) => {\r\n    setInputSeries({...inputSeries, poster_path: e});\r\n  };\r\n  const handlePopularity = (e) => {\r\n    setInputSeries({...inputSeries, popularity: e});\r\n  };\r\n  const handleTags = (e) => {\r\n    setInputSeries({...inputSeries, tags: e});\r\n  };\r\n\r\n\r\n  function updateHandler (e) {   \r\n    console.log(inputSeries)\r\n\r\n    updateSeries({\r\n      variables: {\r\n        id: id,\r\n        updates: {\r\n          title: inputSeries.title,\r\n          overview: inputSeries.overview,\r\n          poster_path: inputSeries.poster_path,\r\n          popularity: parseFloat(inputSeries.popularity),\r\n          tags: inputSeries.tags.split(\",\").map((el) => el.trim())\r\n        }\r\n      }\r\n    })\r\n\r\n    Alert.success(\"Success updating series\")\r\n    refetch()\r\n    handleClose()\r\n  }\r\n\r\n  async function deleteHandler(e) {\r\n    await deleteSeries({ variables: { id }})\r\n    refetch();\r\n    Alert.success(\"Success deleting series\")\r\n    history.goBack()\r\n  }\r\n\r\n  let { loading, error, data, refetch } = useQuery(GET_DETAIL_SERIES, {\r\n    variables: { id: id }\r\n  })\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  }, [])\r\n\r\n  console.log(id, typeof(id))\r\n  console.log(loading, error, data)\r\n\r\n  const { StringType, NumberType } = Schema.Types;\r\n  const model = Schema.Model({\r\n    title: StringType().isRequired('Title is required'),\r\n    overview: StringType().isRequired('Overview is required'),\r\n    poster_path: StringType().isRequired('Poster is required in URL format'),\r\n    popularity: NumberType(),\r\n    tags: StringType()\r\n  })\r\n\r\n  if(loading) return (<CustomLoader />)\r\n  if (error) return (<div>{JSON.stringify(error)}</div>)\r\n  return (\r\n    <FlexboxGrid style={{ marginTop: \"75px\" }}>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header>\r\n          <Modal.Title>Add Series</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form \r\n            fluid \r\n            onSubmit={updateHandler} \r\n            model={model}\r\n            formDefaultValue={inputSeries}\r\n          >\r\n            <FormGroup>\r\n              <ControlLabel>Title</ControlLabel>\r\n              <FormControl name=\"title\" type=\"text\" onChange={handleTitle}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Overview</ControlLabel>\r\n              <FormControl name=\"overview\" type=\"textarea\" rows={5} componentClass=\"textarea\" onChange={handleOverview}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Poster Path</ControlLabel>\r\n              <FormControl name=\"poster_path\" type=\"text\" onChange={handlePoster}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Popularity</ControlLabel>\r\n              <CustomField\r\n                name=\"popularity\"\r\n                accepter={InputNumber}\r\n                step={0.1}\r\n                min={0}\r\n                max={10}\r\n                onChange={handlePopularity}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Tags</ControlLabel>\r\n              <FormControl name=\"tags\" type=\"text\" onChange={handleTags}/>\r\n            </FormGroup>\r\n            <Button type=\"submit\" appearance=\"primary\">\r\n              Submit\r\n            </Button>\r\n            <Button onClick={handleClose} appearance=\"subtle\">\r\n              Cancel\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal backdrop=\"static\" show={showDelete} onHide={() => setShowDelete(false)} size=\"xs\">\r\n        <Modal.Body>\r\n          <Icon\r\n            icon=\"remind\"\r\n            style={{\r\n              color: '#ffb300',\r\n              fontSize: 24\r\n            }}\r\n          />\r\n          {'  '}\r\n          Are you sure you want to delete this series?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={deleteHandler} appearance=\"primary\">\r\n            Yes\r\n          </Button>\r\n          <Button onClick={() => setShowDelete(false)} appearance=\"subtle\">\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <FlexboxGrid.Item colspan={8}>\r\n        <Panel shaded bodyFill style={{width: \"300px\", justifyContent: \"center\", marginLeft: \"2rem\"}}>\r\n          <img \r\n            style={{ width: \"300px\" }}\r\n            src={data.seriesById.poster_path}\r\n          />\r\n        </Panel>\r\n      </FlexboxGrid.Item>\r\n      <FlexboxGrid.Item colspan={16}>\r\n        <Panel shaded style={{ marginLeft:\"4rem\", marginRight:\"2rem\", marginBottom:\"4rem\"}}>\r\n          <h3>{data.seriesById.title}</h3>\r\n          <Divider />\r\n          <h5>Overview:</h5>\r\n          <h6>{data.seriesById.overview}</h6>\r\n          <Divider />\r\n          <h5>Popularity:</h5>\r\n          <Rate defaultValue={(data.seriesById.popularity/2)} allowHalf readOnly/><h6>{data.seriesById.popularity}</h6>\r\n          <Divider />\r\n          <h5>Tags:</h5>\r\n          {data.seriesById.tags.map((el) => {\r\n            return (\r\n              <Button\r\n                disabled\r\n                appearance=\"subtle\"\r\n                key={el}\r\n              >\r\n                {el}\r\n              </Button>\r\n            );\r\n          })}\r\n          <Divider />\r\n          <ButtonToolbar>\r\n            <ButtonGroup>\r\n              <Button appearance=\"ghost\" onClick={handleShow}>Edit</Button>\r\n              <Button appearance=\"ghost\" onClick={() => setShowDelete(true)}>Delete</Button>\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Panel>\r\n      </FlexboxGrid.Item>\r\n    </FlexboxGrid>\r\n  )\r\n}\r\n\r\nexport default SeriesDetail","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\MoviesDetail.jsx",["81","82","83"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { gql, useQuery, useMutation } from '@apollo/client';\r\nimport { FlexboxGrid, Button, ButtonToolbar, ButtonGroup, Container, Panel, Divider, Modal } from 'rsuite';\r\nimport { Form, FormGroup, FormControl, ControlLabel, InputNumber, HelpBlock } from 'rsuite'\r\nimport { Schema, Alert, Icon, Rate } from 'rsuite';\r\nimport CustomLoader from '../components/CustomLoader'\r\n\r\nconst GET_DETAIL_MOVIE = gql`\r\n  query moviesById($id: String!) {\r\n    moviesById(id: $id) {\r\n      title,\r\n      overview,\r\n      poster_path,\r\n      tags,\r\n      popularity\r\n    }\r\n  }\r\n`\r\n\r\nconst UPDATE_MOVIE = gql`\r\n  mutation updateMovie($id: String!, $updates: MovieInput) {\r\n    updateMovie(id: $id, updates: $updates) {\r\n      title,\r\n      overview,\r\n      poster_path,\r\n      tags,\r\n      popularity\r\n    }\r\n  }\r\n`\r\n\r\nconst DELETE_MOVIE = gql`\r\n  mutation deleteMovie ($id: String!) {\r\n    deleteMovie(id: $id) {\r\n      _id\r\n    }\r\n  }\r\n`\r\n\r\nclass CustomField extends React.PureComponent {\r\n  render() {\r\n    const { name, message, label, accepter, error, ...props } = this.props;\r\n    return (\r\n      <FormGroup className={error ? 'has-error' : ''}>\r\n        <ControlLabel>{label} </ControlLabel>\r\n        <FormControl\r\n          name={name}\r\n          accepter={accepter}\r\n          errorMessage={error}\r\n          {...props}\r\n        />\r\n        <HelpBlock>{message}</HelpBlock>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nfunction MoviesDetail () {\r\n  const { id } = useParams()\r\n  const history = useHistory()\r\n  const [inputMovie, setInputMovie] = useState({\r\n    title: \"\",\r\n    overview: \"\",\r\n    poster_path: \"\",\r\n    popularity: 0,\r\n    tags: []\r\n  })\r\n\r\n  const [updateMovie] = useMutation(UPDATE_MOVIE)\r\n  const [deleteMovie] = useMutation(DELETE_MOVIE)\r\n\r\n  const [show, setShow] = useState(false)\r\n  const [showDelete, setShowDelete] = useState(false)\r\n\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => {\r\n    setInputMovie(data.moviesById)\r\n    setShow(true)\r\n  }\r\n\r\n  const handleTitle = (e) => {\r\n    setInputMovie({...inputMovie, title: e});\r\n  };\r\n  const handleOverview = (e) => {\r\n    setInputMovie({...inputMovie, overview: e});\r\n  };\r\n  const handlePoster = (e) => {\r\n    setInputMovie({...inputMovie, poster_path: e});\r\n  };\r\n  const handlePopularity = (e) => {\r\n    setInputMovie({...inputMovie, popularity: e});\r\n  };\r\n  const handleTags = (e) => {\r\n    setInputMovie({...inputMovie, tags: e});\r\n  };\r\n\r\n\r\n  function updateHandler (e) {   \r\n    console.log(inputMovie)\r\n\r\n    updateMovie({\r\n      variables: {\r\n        id: id,\r\n        updates: {\r\n          title: inputMovie.title,\r\n          overview: inputMovie.overview,\r\n          poster_path: inputMovie.poster_path,\r\n          popularity: parseFloat(inputMovie.popularity),\r\n          tags: inputMovie.tags.split(\",\").map((el) => el.trim())\r\n        }\r\n      }\r\n    })\r\n\r\n    Alert.success(\"Success updating movie\")\r\n    refetch()\r\n    handleClose()\r\n  }\r\n\r\n  async function deleteHandler(e) {\r\n    await deleteMovie({ variables: { id }})\r\n    refetch();\r\n    Alert.success(\"Success deleting movie\")\r\n    history.goBack()\r\n  }\r\n\r\n  let { loading, error, data, refetch } = useQuery(GET_DETAIL_MOVIE, {\r\n    variables: { id: id }\r\n  })\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  }, [])\r\n\r\n  console.log(id, typeof(id))\r\n  console.log(loading, error, data)\r\n\r\n  const { StringType, NumberType } = Schema.Types;\r\n  const model = Schema.Model({\r\n    title: StringType().isRequired('Title is required'),\r\n    overview: StringType().isRequired('Overview is required'),\r\n    poster_path: StringType().isRequired('Poster is required in URL format'),\r\n    popularity: NumberType(),\r\n    tags: StringType()\r\n  })\r\n\r\n  if(loading) return (<CustomLoader />)\r\n  if (error) return (<div>{JSON.stringify(error)}</div>)\r\n  return (\r\n    <FlexboxGrid style={{ marginTop: \"75px\" }}>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header>\r\n          <Modal.Title>Add Movies</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form \r\n            fluid \r\n            onSubmit={updateHandler} \r\n            model={model}\r\n            formDefaultValue={inputMovie}\r\n          >\r\n            <FormGroup>\r\n              <ControlLabel>Title</ControlLabel>\r\n              <FormControl name=\"title\" type=\"text\" onChange={handleTitle}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Overview</ControlLabel>\r\n              <FormControl name=\"overview\" type=\"textarea\" rows={5} componentClass=\"textarea\" onChange={handleOverview}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Poster Path</ControlLabel>\r\n              <FormControl name=\"poster_path\" type=\"text\" onChange={handlePoster}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Popularity</ControlLabel>\r\n              <CustomField\r\n                name=\"popularity\"\r\n                accepter={InputNumber}\r\n                step={0.1}\r\n                min={0}\r\n                max={10}\r\n                onChange={handlePopularity}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <ControlLabel>Tags</ControlLabel>\r\n              <FormControl name=\"tags\" type=\"text\" onChange={handleTags}/>\r\n            </FormGroup>\r\n            <Button type=\"submit\" appearance=\"primary\">\r\n              Submit\r\n            </Button>\r\n            <Button onClick={handleClose} appearance=\"subtle\">\r\n              Cancel\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal backdrop=\"static\" show={showDelete} onHide={() => setShowDelete(false)} size=\"xs\">\r\n        <Modal.Body>\r\n          <Icon\r\n            icon=\"remind\"\r\n            style={{\r\n              color: '#ffb300',\r\n              fontSize: 24\r\n            }}\r\n          />\r\n          {'  '}\r\n          Are you sure you want to delete this movie?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={deleteHandler} appearance=\"primary\">\r\n            Yes\r\n          </Button>\r\n          <Button onClick={() => setShowDelete(false)} appearance=\"subtle\">\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <FlexboxGrid.Item colspan={8}>\r\n        <Panel shaded bodyFill style={{width: \"300px\", justifyContent: \"center\", marginLeft: \"75px\"}}>\r\n          <img \r\n            style={{ width: \"300px\" }}\r\n            src={data.moviesById.poster_path}\r\n          />\r\n        </Panel>\r\n      </FlexboxGrid.Item>\r\n      <FlexboxGrid.Item colspan={16}>\r\n        <Panel shaded>\r\n          <h3>{data.moviesById.title}</h3>\r\n          <Divider />\r\n          <h5>Overview:</h5>\r\n          <h6>{data.moviesById.overview}</h6>\r\n          <Divider />\r\n          <h5>Popularity:</h5>\r\n          <Rate defaultValue={(data.moviesById.popularity/2)} allowHalf readOnly/><h6>{data.moviesById.popularity}</h6>\r\n          <Divider />\r\n          <h5>Tags:</h5>\r\n          {data.moviesById.tags.map((el) => {\r\n            return (\r\n              <Button\r\n                disabled\r\n                appearance=\"subtle\"\r\n                key={el}\r\n              >\r\n                {el}\r\n              </Button>\r\n            );\r\n          })}\r\n          <Divider />\r\n          <ButtonToolbar>\r\n            <ButtonGroup>\r\n              <Button appearance=\"ghost\" onClick={handleShow}>Edit</Button>\r\n              <Button appearance=\"ghost\" onClick={() => setShowDelete(true)}>Delete</Button>\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Panel>\r\n      </FlexboxGrid.Item>\r\n    </FlexboxGrid>\r\n  )\r\n}\r\n\r\nexport default MoviesDetail","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Home.jsx",["84","85"],"import React, { useEffect } from 'react';\r\nimport { Container, FlexboxGrid, Divider, Icon, Pagination } from 'rsuite';\r\nimport Card from '../components/Card'\r\nimport CustomLoader from '../components/CustomLoader'\r\n\r\nimport { gql, useQuery } from '@apollo/client'\r\n\r\nconst GET_DATA = gql`\r\n  query {\r\n    movies {\r\n      _id\r\n      title\r\n      poster_path\r\n    }\r\n    series {\r\n      _id\r\n      title\r\n      poster_path\r\n    }\r\n  }\r\n`\r\n\r\nfunction Home () {\r\n  const { loading, error, data, refetch } = useQuery(GET_DATA)\r\n\r\n  useEffect(() => {\r\n    refetch()\r\n  }, [data])\r\n\r\n  if (loading) return (<CustomLoader />)\r\n  if (error) return <div>{JSON.stringify(error)}</div>\r\n  return (\r\n    <Container style={{ margin:'2rem' }}>\r\n      <h1 style={{ alignSelf: \"center\" }}>Welcome to EntertainMe</h1>\r\n      <Divider />\r\n      <h3 style={{ alignSelf: \"center\", margin:'2rem' }}> Movie List </h3>\r\n      <FlexboxGrid justify=\"space-around\">\r\n        {data.movies.map((movie) => {\r\n          return <Card key={movie._id} content={movie} from={\"movies\"} />;\r\n        })}\r\n      </FlexboxGrid>\r\n      <Pagination prev\r\n        last\r\n        next\r\n        first\r\n        size=\"md\"\r\n        pages={10}\r\n        style={{ alignSelf:\"center\" , marginTop: \"20px\"}}\r\n      />\r\n      <Divider />\r\n      <h3 style={{ alignSelf: \"center\", margin:'2rem' }}> Series List </h3>\r\n      <FlexboxGrid justify=\"space-around\">\r\n        {data.series.map((serie) => {\r\n          return <Card key={serie._id} content={serie} from={\"series\"} />;\r\n        })}\r\n      </FlexboxGrid>\r\n      <Pagination prev\r\n        last\r\n        next\r\n        first\r\n        size=\"md\"\r\n        pages={10}\r\n        style={{ alignSelf:\"center\" , marginTop: \"20px\", marginBottom: \"20px\"}}\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Home","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\pages\\Favorites.jsx",["86","87","88","89","90","91","92"],"import React, { useEffect } from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { Container, FlexboxGrid, Divider, Icon, Pagination } from 'rsuite';\r\nimport Card from '../components/Card'\r\nimport CustomLoader from '../components/CustomLoader'\r\n\r\nconst GET_FAVORITES = gql`\r\n  query GetFavorites {\r\n    favorites @client\r\n  }\r\n`\r\n\r\nfunction Favorites () {\r\n  const {loading, error, data} = useQuery(GET_FAVORITES)\r\n\r\n  console.log(data.favorites)\r\n  \r\n  if (loading) return (<CustomLoader />)\r\n  if (error) return <div>{JSON.stringify(error)}</div>\r\n  if (data.favorites.length === 0) return (<Container><h1 style={{ alignSelf: \"center\", margin:'2rem' }}>You have no Favorites!</h1></Container>)\r\n  return (\r\n    <Container style={{ margin:'2rem' }}>\r\n      <h1 style={{ alignSelf: \"center\" }}>Your Favorites</h1>\r\n      <Divider />\r\n      <h3 style={{ alignSelf: \"center\", margin:'2rem' }}> Movie List </h3>\r\n      <FlexboxGrid justify=\"space-around\">\r\n        {data.favorites.map((favorite) => {\r\n          if (favorite.__typename == 'Movies') {\r\n            return <Card key={favorite._id} content={favorite} from={'movies'} favorite={true}/>;\r\n          }\r\n        })}\r\n      </FlexboxGrid>\r\n      <Divider />\r\n      <h3 style={{ alignSelf: \"center\", margin:'2rem' }}> Series List </h3>\r\n      <FlexboxGrid justify=\"space-around\">\r\n        {data.favorites.map((favorite) => {\r\n          if (favorite.__typename == 'Series') {\r\n            return <Card key={favorite._id} content={favorite} from={'series'} favorite={true}/>;\r\n          }\r\n        })}\r\n      </FlexboxGrid>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Favorites","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\components\\Card.jsx",["93","94","95"],"import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { Panel, Button, ButtonGroup, ButtonToolbar, Alert } from 'rsuite'\r\nimport { favoritesVar } from \"../cache\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction Card ({ content, from, favorite }) {\r\n\r\n  const addFavorites = (data) => {\r\n    const prevData = favoritesVar()\r\n    if (!prevData.some(el => el._id == data._id)) {\r\n      favoritesVar([data, ...prevData])\r\n      Alert.success(\"Added to favorites\")\r\n    } else {\r\n      Alert.error(\"Already added to favorites\")\r\n    }\r\n  }\r\n\r\n\r\n  const history = useHistory()\r\n  \r\n\r\n  return (\r\n    <Panel shaded bordered bodyFill style={{ display: 'inline-block', width: 240, justifyContent: \"center\", minHeight: \"500px\"}}>\r\n      <img src={content.poster_path} alt={content.id} width=\"240\" />\r\n      <Panel style={{ alignContent: \"center\"}}>\r\n        <h5 style={{textAlign: \"center\"}}>{content.title}</h5>\r\n        <ButtonGroup size=\"sm\" style={{ alignContent: \"center\", alignSelf: \"center\", marginTop:'1rem' }} justified>\r\n          <Button appearance=\"ghost\" onClick={() => history.push(`/${from}/${content._id}`)}>Detail</Button>\r\n          {(!favorite) && <Button appearance=\"ghost\" color=\"red\" onClick={() => addFavorites(content)}>Favorite</Button>}\r\n        </ButtonGroup>\r\n      </Panel>\r\n    </Panel>\r\n  )\r\n}\r\n\r\nexport default Card","C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\cache\\index.js",[],"C:\\Users\\msidi\\belajar\\phase3\\entertainme\\client\\src\\components\\CustomLoader.jsx",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":8,"nodeType":"102","messageId":"103","endLine":1,"endColumn":12},{"ruleId":"100","severity":1,"message":"104","line":2,"column":23,"nodeType":"102","messageId":"103","endLine":2,"endColumn":31},{"ruleId":"100","severity":1,"message":"105","line":2,"column":43,"nodeType":"102","messageId":"103","endLine":2,"endColumn":47},{"ruleId":"100","severity":1,"message":"106","line":2,"column":49,"nodeType":"102","messageId":"103","endLine":2,"endColumn":59},{"ruleId":"100","severity":1,"message":"107","line":124,"column":33,"nodeType":"102","messageId":"103","endLine":124,"endColumn":40},{"ruleId":"100","severity":1,"message":"105","line":2,"column":43,"nodeType":"102","messageId":"103","endLine":2,"endColumn":47},{"ruleId":"100","severity":1,"message":"106","line":2,"column":49,"nodeType":"102","messageId":"103","endLine":2,"endColumn":59},{"ruleId":"100","severity":1,"message":"107","line":125,"column":33,"nodeType":"102","messageId":"103","endLine":125,"endColumn":40},{"ruleId":"100","severity":1,"message":"108","line":4,"column":59,"nodeType":"102","messageId":"103","endLine":4,"endColumn":68},{"ruleId":"109","severity":1,"message":"110","line":133,"column":6,"nodeType":"111","endLine":133,"endColumn":8,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":221,"column":11,"nodeType":"115","endLine":224,"endColumn":13},{"ruleId":"100","severity":1,"message":"108","line":4,"column":59,"nodeType":"102","messageId":"103","endLine":4,"endColumn":68},{"ruleId":"109","severity":1,"message":"110","line":133,"column":6,"nodeType":"111","endLine":133,"endColumn":8,"suggestions":"116"},{"ruleId":"113","severity":1,"message":"114","line":221,"column":11,"nodeType":"115","endLine":224,"endColumn":13},{"ruleId":"100","severity":1,"message":"105","line":2,"column":43,"nodeType":"102","messageId":"103","endLine":2,"endColumn":47},{"ruleId":"109","severity":1,"message":"110","line":28,"column":6,"nodeType":"111","endLine":28,"endColumn":12,"suggestions":"117"},{"ruleId":"100","severity":1,"message":"118","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":26},{"ruleId":"100","severity":1,"message":"105","line":3,"column":43,"nodeType":"102","messageId":"103","endLine":3,"endColumn":47},{"ruleId":"100","severity":1,"message":"106","line":3,"column":49,"nodeType":"102","messageId":"103","endLine":3,"endColumn":59},{"ruleId":"119","severity":1,"message":"120","line":27,"column":40,"nodeType":"121","messageId":"122","endLine":27,"endColumn":42},{"ruleId":"123","severity":1,"message":"124","line":28,"column":35,"nodeType":"125","messageId":"126","endLine":28,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":36,"column":40,"nodeType":"121","messageId":"122","endLine":36,"endColumn":42},{"ruleId":"123","severity":1,"message":"124","line":37,"column":35,"nodeType":"125","messageId":"126","endLine":37,"endColumn":37},{"ruleId":"100","severity":1,"message":"127","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":14},{"ruleId":"100","severity":1,"message":"128","line":3,"column":38,"nodeType":"102","messageId":"103","endLine":3,"endColumn":51},{"ruleId":"123","severity":1,"message":"124","line":11,"column":37,"nodeType":"125","messageId":"126","endLine":11,"endColumn":39},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'Icon' is defined but never used.","'Pagination' is defined but never used.","'refetch' is assigned a value but never used.","'Container' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["131"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["132"],["133"],"'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'ButtonToolbar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [refetch]",{"range":"139","text":"140"},{"range":"141","text":"140"},"Update the dependencies array to be: [data, refetch]",{"range":"142","text":"143"},[3411,3413],"[refetch]",[3375,3377],[565,571],"[data, refetch]"]